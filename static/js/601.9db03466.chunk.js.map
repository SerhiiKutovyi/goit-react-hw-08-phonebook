{"version":3,"file":"static/js/601.9db03466.chunk.js","mappings":"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","sources":["redux/contacts/selector.js","pages/Contacts/Contacts.styles.js","components/ContactForm/ContactForm.styles.js","components/ContactForm/ContactForm .jsx","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.jsx","components/Filter/Filter.styles.js","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","import styled from 'styled-components';\n\nexport const Section = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-left: 40px;\n\n  h1 {\n    margin-bottom: 40px;\n\n    font-family: 'Poppins';\n    font-style: normal;\n    font-weight: 700;\n    font-size: 48px;\n    line-height: 72px;\n\n    color: #000000;\n  }\n\n  h2 {\n    margin-bottom: 20px;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  display: flex;\n  flex-direction: column;\n\n  margin-bottom: 40px;\n\n  max-width: 400px;\n  border: 1px solid black;\n  padding: 20px;\n\n  label {\n    font-family: 'Poppins';\n    font-style: normal;\n    font-weight: 200;\n    font-size: 28px;\n\n    color: #000000;\n  }\n\n  input {\n    height: 20px;\n    max-width: 200px;\n    margin-bottom: 20px;\n  }\n\n  button {\n    border: none;\n    padding: 5px;\n    max-width: 100px;\n    cursor: pointer;\n\n    background-color: blue;\n    color: white;\n    border-radius: 4px;\n  }\n\n  li {\n    margin-bottom: 20px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { FormStyled } from './ContactForm.styles';\n\nexport const ContactForm = ({ onContactSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const allState = { name, number };\n\n  const handleChange = event => {\n    const { value, name } = event.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onContactSubmit(allState);\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormStyled onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">Name</label>\n      <input\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={handleChange}\n      />\n      <label htmlFor=\"number\">Number</label>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        onChange={handleChange}\n      />\n      <button type=\"submit\"> Add contact</button>\n    </FormStyled>\n  );\n};\n\nContactForm.propTypes = {\n  onContactSubmit: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const ContactStyled = styled.ul`\n  margin-left: 10px;\n  li {\n    display: flex;\n    margin-bottom: 10px;\n  }\n\n  p {\n    width: 300px;\n  }\n\n  button {\n    border: none;\n    padding: 2px 5px;\n\n    cursor: pointer;\n\n    border-radius: 4px;\n    background-color: coral;\n    color: white;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { ContactStyled } from './ContactList.styles';\n\nexport const ContactList = ({ contacts, deleteUsers }) => {\n  return (\n    <>\n      <ContactStyled>\n        {contacts.map(({ name, id, number }) => (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button\n              type=\"button\"\n              onClick={() => {\n                deleteUsers(id);\n              }}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ContactStyled>\n    </>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  deleteUsers: PropTypes.func.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const FilterStyled = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  label {\n    margin-bottom: 10px;\n  }\n\n  input {\n    height: 20px;\n    max-width: 200px;\n    margin-bottom: 10px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { FilterStyled } from './Filter.styles';\nimport { nanoid } from 'nanoid';\n\nexport const Filter = ({ click, filter }) => {\n  const filterId = nanoid();\n  return (\n    <>\n      <FilterStyled>\n        <label htmlFor={filterId}>Find contacts by name</label>\n        <input\n          autoComplete=\"off\"\n          id={filterId}\n          type=\"text\"\n          name=\"Find contacts by name\"\n          value={filter}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          onChange={click}\n        />\n      </FilterStyled>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  click: PropTypes.func.isRequired,\n  filter: PropTypes.string,\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useEffect /*useState*/ } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { filterContacts } from 'redux/contacts/slice';\nimport {\n  fetchContacts,\n  addContact,\n  deleteContact,\n} from 'redux/contacts/operation';\nimport {\n  selectContacts,\n  selectIsLoading,\n  selectError,\n  selectFilter,\n} from 'redux/contacts/selector';\nimport useAuth from 'hooks/useAuth';\n\nimport { Section } from './Contacts.styles';\nimport { Loader } from 'components/Loader/Loader';\nimport { ContactForm } from '../../components/ContactForm/ContactForm ';\nimport { ContactList } from '../../components/ContactList/ContactList';\nimport { Filter } from '../../components/Filter/Filter';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  // const [filter, setFilter] = useState('');\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filter = useSelector(selectFilter);\n  const { isLoggedIn } = useAuth();\n\n  useEffect(() => {\n    if (isLoggedIn) dispatch(fetchContacts());\n  }, [dispatch, isLoggedIn]);\n\n  const filterUsers = event => {\n    // setFilter(event.target.value);\n    console.log(event.target.value);\n    dispatch(filterContacts(event.target.value));\n  };\n\n  const deleteUsers = userId => {\n    dispatch(deleteContact(userId));\n  };\n\n  const verification = () => {\n    if (!filter) {\n      return contacts;\n    } else {\n      return contacts.filter(\n        user =>\n          user.name.toLowerCase().includes(filter.toLowerCase()) ??\n          user.number.includes(filter)\n      );\n    }\n  };\n\n  function formSubmitHandler(data) {\n    if (contacts.find(contact => contact.name === data.name)) {\n      alert(`${data.name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContact(data));\n  }\n\n  return (\n    <>\n      {error ? (\n        <p>Something went wrong</p>\n      ) : (\n        <>\n          {loading && <Loader />}\n          <Section>\n            <h1>Phonebook</h1>\n            <ContactForm onContactSubmit={formSubmitHandler} />\n            <h2>Contacts</h2>\n            <Filter filter={filter} click={filterUsers} />\n            <ContactList contacts={verification()} deleteUsers={deleteUsers} />\n          </Section>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","Section","styled","FormStyled","ContactForm","onContactSubmit","useState","name","setName","number","setNumber","allState","handleChange","event","target","value","reset","onSubmit","preventDefault","htmlFor","type","pattern","title","required","onChange","ContactStyled","ContactList","deleteUsers","map","id","onClick","FilterStyled","Filter","click","filterId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","autoComplete","dispatch","useDispatch","useSelector","loading","isLoggedIn","useAuth","useEffect","fetchContacts","Loader","data","find","contact","alert","addContact","console","log","filterContacts","user","toLowerCase","includes","userId","deleteContact"],"sourceRoot":""}